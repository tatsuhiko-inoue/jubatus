# Jubatus: Online machine learning framework for distributed environment
# Copyright (C) 2012 Preferred Infrastracture and Nippon Telegraph and Telephone Corporation.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

#- argument for set_config(). Example for ``config``:
#- 
#- ::
#- 
#-    {
#-     "method": "lof",
#-     "parameter": {
#-       "nearest_neighbor_num": 10,
#-       "reverse_nearest_neighbor_num": 30,
#-       "method": "euclid_lsh",
#-       "parameter": {
#-         "lsh_num": 8,
#-         "table_num": 16,
#-         "probe_num": 64,
#-         "bin_width": 10,
#-         "seed": 1091,
#-         "retain_projection": false
#-       }
#-     }
#-    }

message datum {
  0: list<tuple<string, string> >  string_values
  1: list<tuple<string, double> >  num_values
}

service anomaly {

  #@random #@analysis #@pass
  string get_config(0: string name) # //@random

  #- clear a point.
  #@cht #@update #@all_and
  bool clear_row(0: string name, 1: string id) # //@cht

  #- add a point.
  #@random #@nolock #@pass
  tuple<string, float> add(0: string name, 1: datum row) # //@random

  #- update a point.
  #@cht #@update #@pass
  float update(0: string name, 1: string id, 2: datum row) # //@cht

  #- clear whole data.
  #@broadcast #@update #@all_and
  bool clear(0: string name) # //@broadcast

  #- calculate an anomaly measure value without adding a point.
  #@random #@analysis #@pass
  float calc_score(0: string name, 1: datum row) # //@random

  #@broadcast #@analysis #@concat
  list<string>  get_all_rows(0: string name) # //@broadcast

  #@broadcast #@update #@all_and
  bool save(0: string name, 1: string id) # //@broadcast

  #@broadcast #@update #@all_and
  bool load(0: string name, 1: string id) # //@broadcast

  #@broadcast #@analysis #@merge
  map<string, map<string, string> >  get_status(0: string name) # //@broadcast
}
